// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package queries

import (
	"context"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (
  encrypted_private_identity_key, encrypted_title, encrypted_description
) VALUES (?, ?, ?)
RETURNING chat_id
`

type CreateChatParams struct {
	EncryptedPrivateIdentityKey []byte
	EncryptedTitle              []byte
	EncryptedDescription        []byte
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createChat, arg.EncryptedPrivateIdentityKey, arg.EncryptedTitle, arg.EncryptedDescription)
	var chat_id int64
	err := row.Scan(&chat_id)
	return chat_id, err
}

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages (
  chat_id, sequence_number, encrypted_public_identity_key, encrypted_content, encrypted_created_at
) VALUES (?, ?, ?, ?, ?)
`

type CreateMessageParams struct {
	ChatID                     int64
	SequenceNumber             int64
	EncryptedPublicIdentityKey []byte
	EncryptedContent           []byte
	EncryptedCreatedAt         []byte
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.ExecContext(ctx, createMessage,
		arg.ChatID,
		arg.SequenceNumber,
		arg.EncryptedPublicIdentityKey,
		arg.EncryptedContent,
		arg.EncryptedCreatedAt,
	)
	return err
}

const createParticipant = `-- name: CreateParticipant :exec
INSERT INTO participants (
  chat_id, sequence_number, encrypted_public_identity_key, encrypted_name, encrypted_ecdh_public_key, encrypted_my_ecdh_private_key
) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateParticipantParams struct {
	ChatID                     int64
	SequenceNumber             int64
	EncryptedPublicIdentityKey []byte
	EncryptedName              []byte
	EncryptedEcdhPublicKey     []byte
	EncryptedMyEcdhPrivateKey  []byte
}

func (q *Queries) CreateParticipant(ctx context.Context, arg CreateParticipantParams) error {
	_, err := q.db.ExecContext(ctx, createParticipant,
		arg.ChatID,
		arg.SequenceNumber,
		arg.EncryptedPublicIdentityKey,
		arg.EncryptedName,
		arg.EncryptedEcdhPublicKey,
		arg.EncryptedMyEcdhPrivateKey,
	)
	return err
}

const createPassword = `-- name: CreatePassword :exec
INSERT INTO password (
  id, salt
) VALUES (0, ?)
`

func (q *Queries) CreatePassword(ctx context.Context, salt []byte) error {
	_, err := q.db.ExecContext(ctx, createPassword, salt)
	return err
}

const getChat = `-- name: GetChat :one
SELECT chat_id, encrypted_private_identity_key, encrypted_title, encrypted_description FROM chats
WHERE chat_id = ?
`

func (q *Queries) GetChat(ctx context.Context, chatID int64) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChat, chatID)
	var i Chat
	err := row.Scan(
		&i.ChatID,
		&i.EncryptedPrivateIdentityKey,
		&i.EncryptedTitle,
		&i.EncryptedDescription,
	)
	return i, err
}

const getChats = `-- name: GetChats :many
SELECT chat_id, encrypted_title, encrypted_description FROM chats
ORDER BY chat_id ASC
`

type GetChatsRow struct {
	ChatID               int64
	EncryptedTitle       []byte
	EncryptedDescription []byte
}

func (q *Queries) GetChats(ctx context.Context) ([]GetChatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatsRow
	for rows.Next() {
		var i GetChatsRow
		if err := rows.Scan(&i.ChatID, &i.EncryptedTitle, &i.EncryptedDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessages = `-- name: GetMessages :many
SELECT chat_id, sequence_number, encrypted_public_identity_key, encrypted_content, encrypted_created_at FROM messages
WHERE chat_id = ?
ORDER BY sequence_number ASC
`

func (q *Queries) GetMessages(ctx context.Context, chatID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ChatID,
			&i.SequenceNumber,
			&i.EncryptedPublicIdentityKey,
			&i.EncryptedContent,
			&i.EncryptedCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextSequenceNumber = `-- name: GetNextSequenceNumber :one
SELECT sequence_number FROM messages
WHERE chat_id = ?
ORDER BY sequence_number DESC
LIMIT 1
`

func (q *Queries) GetNextSequenceNumber(ctx context.Context, chatID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNextSequenceNumber, chatID)
	var sequence_number int64
	err := row.Scan(&sequence_number)
	return sequence_number, err
}

const getParticipants = `-- name: GetParticipants :many
SELECT chat_id, sequence_number, encrypted_public_identity_key, encrypted_name, encrypted_ecdh_public_key, encrypted_my_ecdh_private_key FROM participants
WHERE chat_id = ?
`

func (q *Queries) GetParticipants(ctx context.Context, chatID int64) ([]Participant, error) {
	rows, err := q.db.QueryContext(ctx, getParticipants, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.ChatID,
			&i.SequenceNumber,
			&i.EncryptedPublicIdentityKey,
			&i.EncryptedName,
			&i.EncryptedEcdhPublicKey,
			&i.EncryptedMyEcdhPrivateKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPassword = `-- name: GetPassword :one
SELECT salt FROM password
`

func (q *Queries) GetPassword(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getPassword)
	var salt []byte
	err := row.Scan(&salt)
	return salt, err
}

const updateChat = `-- name: UpdateChat :exec
UPDATE chats
SET encrypted_title = ?,
    encrypted_description = ?
WHERE chat_id = ?
`

type UpdateChatParams struct {
	EncryptedTitle       []byte
	EncryptedDescription []byte
	ChatID               int64
}

func (q *Queries) UpdateChat(ctx context.Context, arg UpdateChatParams) error {
	_, err := q.db.ExecContext(ctx, updateChat, arg.EncryptedTitle, arg.EncryptedDescription, arg.ChatID)
	return err
}

const updateParticipant = `-- name: UpdateParticipant :exec
UPDATE participants
SET encrypted_name = ?,
    encrypted_ecdh_public_key = ?,
    encrypted_my_ecdh_private_key = ?
WHERE chat_id = ? AND sequence_number = ?
`

type UpdateParticipantParams struct {
	EncryptedName             []byte
	EncryptedEcdhPublicKey    []byte
	EncryptedMyEcdhPrivateKey []byte
	ChatID                    int64
	SequenceNumber            int64
}

func (q *Queries) UpdateParticipant(ctx context.Context, arg UpdateParticipantParams) error {
	_, err := q.db.ExecContext(ctx, updateParticipant,
		arg.EncryptedName,
		arg.EncryptedEcdhPublicKey,
		arg.EncryptedMyEcdhPrivateKey,
		arg.ChatID,
		arg.SequenceNumber,
	)
	return err
}
